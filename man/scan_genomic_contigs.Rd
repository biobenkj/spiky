% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scan_genomic_contigs.R
\name{scan_genomic_contigs}
\alias{scan_genomic_contigs}
\title{scan genomic contigs in a BAM/CRAM file}
\usage{
scan_genomic_contigs(bam, spike, param = NULL, ...)
}
\arguments{
\item{bam}{the BAM or CRAM file}

\item{spike}{the spike-in reference database (e.g. data(spike))}

\item{param}{a ScanBamParam object specifying which reads to count (NULL)}

\item{...}{additional arguments to pass to scanBamParam()}
}
\value{
\preformatted{     a CompressedGRangesList with bin- and spike-level coverage
}
}
\description{
The default workflow for spiky is roughly as follows:
}
\details{
\enumerate{
\item Identify and quantify the spike-in contigs in an experiment.
\item Fit a model for sequence-based abundance artifacts using the spike-ins.
\item Quantify raw fragment abundance on genomic contigs, and adjust per step 2.
}

scan_genomic_contigs addresses the first half of step 3. The assumption is
that anything which
}
\examples{
library(GenomicRanges)
data(spike, package="spiky")
sb <- system.file("extdata", "example.spike.bam", package="spiky",
                  mustWork=TRUE) # swap for a CRAM 
res <- scan_genomic_contigs(sb, spike=spike, bins=GRanges())
res

}
\seealso{
\preformatted{    GenomeInfoDb::keepStandardChromosomes
}

\preformatted{    Rsamtools::ScanBamParam
}
}
